# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T11:04:52+00:00



import argparse
import json
import os
from datetime import datetime
from typing import *
from typing import Optional

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity, HTTPBasic
from fastapi import Path, Query
from pydantic import conint, constr

from models import (
    MonitorV1AlertInstance,
    MonitorV1Event,
    V1AlertsGetResponse,
    V1EventsGetResponse,
)

app = MCPProxy(
    contact={
        'email': 'support@twilio.com',
        'name': 'Twilio Support',
        'url': 'https://support.twilio.com',
    },
    description='This is the public Twilio REST API.',
    license={
        'name': 'Apache 2.0',
        'url': 'https://www.apache.org/licenses/LICENSE-2.0.html',
    },
    termsOfService='https://www.twilio.com/legal/tos',
    title='Twilio - Monitor',
    version='1.42.0',
    servers=[{'url': 'https://monitor.twilio.com'}],
)


@app.get(
    '/v1/Alerts',
    tags=['event_tracking'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def list_alert(
    log_level: Optional[str] = Query(None, alias='LogLevel'),
    start_date: Optional[datetime] = Query(None, alias='StartDate'),
    end_date: Optional[datetime] = Query(None, alias='EndDate'),
    page_size: Optional[conint(ge=1, le=1000)] = Query(None, alias='PageSize'),
    page: Optional[conint(ge=0)] = Query(None, alias='Page'),
    page_token: Optional[str] = Query(None, alias='PageToken'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/Alerts/{Sid}',
    tags=['event_tracking'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def fetch_alert(
    sid: constr(pattern=r'^NO[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    )
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/Events',
    description=""" Returns a list of events in the account, sorted by event-date. """,
    tags=['event_tracking'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def list_event(
    actor_sid: Optional[
        constr(pattern=r'^US[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Query(None, alias='ActorSid'),
    event_type: Optional[str] = Query(None, alias='EventType'),
    resource_sid: Optional[
        constr(pattern=r'^[a-zA-Z]{2}[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Query(None, alias='ResourceSid'),
    source_ip_address: Optional[str] = Query(None, alias='SourceIpAddress'),
    start_date: Optional[datetime] = Query(None, alias='StartDate'),
    end_date: Optional[datetime] = Query(None, alias='EndDate'),
    page_size: Optional[conint(ge=1, le=1000)] = Query(None, alias='PageSize'),
    page: Optional[conint(ge=0)] = Query(None, alias='Page'),
    page_token: Optional[str] = Query(None, alias='PageToken'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/Events/{Sid}',
    tags=['event_tracking'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def fetch_event(
    sid: constr(pattern=r'^AE[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    )
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
